@model IEnumerable<ToolLibrary.Models.Tool>
@using ToolLibrary.Models
@{
    var m = Model.ToList();
    ViewBag.Title = "Tools";
    AutoMapper.Mapper.CreateMap<Tool, ToolViewModel>();
    var t = AutoMapper.Mapper.Map<List<Tool>, List<ToolViewModel>>(m);
}

<h2>Tools</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<b>Filters:</b><br />
<div data-bind="foreach: filter.filters">
    <div>
        <span data-bind="text: Name"></span>:<br />
    </div>
    <div data-bind="if: Type == 'select'">
        <select data-bind="options: Options, optionsText: 'Name', value: CurrentOption"></select>
    </div>
    <div data-bind="if: Type == 'text'">
        <input type="text" data-bind="value: Value, valueUpdate: 'afterkeydown'" />
    </div>
</div>
<br />
<b>Sorts:</b>
Field:<br />
<select data-bind="options: sorter.sortOptions, optionsText: 'Name', value: sorter.currentSortOption"></select>
Direction:
<select data-bind="options: sorter.sortDirections, optionsText: 'Name', value: sorter.currentSortDirection"></select>
<br />
<br />
<div class="Pager"></div>
<div class="NoRecords"></div>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Manufacturer)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                Availablity:
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody data-bind="foreach: pager.currentPageRecords">
        <tr>
            <td><span data-bind="text: Name"></span></td>
            <td><span data-bind="text: Description"></span></td>
            <td><span data-bind="text: Manufacturer"></span></td>
            <td><span data-bind="text: Category"></span></td>
            <td><span data-bind="text: Type"></span></td>
            <td><div data-bind="visible: IsCheckedOut">Checked Out.</div>
            <td>
                <a data-bind="attr: { href: '@Url.Action("Details")/' + Id }"
                   class="btn btn-info">Details</a>
                <a data-bind="attr: { href: '@Url.Action("Edit")/' + Id }"
                   class="btn btn-primary">Edit</a>
                <a data-bind="attr: { href: '@Url.Action("Delete")/' + Id }"
                   class="btn btn-danger">Delete</a>
            </td>
        </tr>
    </tbody>
</table>

@section Scripts {
<script>
    function CustomerModel(data) {
        if (!data) {
            data = {};
        }

        var self = this;
        self.Id = data.Id;
        self.Name = data.Name;
        self.Description = data.Description;
        self.Manufacturer = data.Manufacturer;
        self.Category = data.Category.Name;
        self.ImageUrl = data.ImageUrl;
        self.IsCheckedOut = data.IsCheckedOut;
        self.Type = data.Type;
    }

    function CustomerPageModel(data) {
        if (!data) {
            data = {};
        }

        var self = this;
        self.customers = ExtractModels(self, data.customers, CustomerModel);

        var filters = [{
            Type: "text",
            Name: "Name",
            Value: ko.observable(""),
            RecordValue: function (record) { return record.Name; }
        },
        { Type: "text", Name: "Description", Value: ko.observable(""), RecordValue: function (record) { return record.Description; }}

        ];
        var sortOptions = [{
            Name: "Name",
            Value: "Name",
            Sort: function (left, right) { return CompareCaseInsensitive(left.name, right.name); }
        },
        {Name: "Description", Value: "Description", Sort: function (left, right) {return CompareCaseInsensitive(left.name, right.name);}}
        ];
        self.filter = new FilterModel(filters, self.customers);
        self.sorter = new SorterModel(sortOptions, self.filter.filteredRecords);
        self.pager = new PagerModel(self.sorter.orderedRecords);
    }

    function PagerModel(records) {
        var self = this;
        self.pageSizeOptions = ko.observableArray([1, 5, 25, 50, 100, 250, 500]);

        self.records = GetObservableArray(records);
        self.currentPageIndex = ko.observable(self.records().length > 0 ? 0 : -1);
        self.currentPageSize = ko.observable(25);
        self.recordCount = ko.computed(function () {
            return self.records().length;
        });
        self.maxPageIndex = ko.computed(function () {
            return Math.ceil(self.records().length / self.currentPageSize()) - 1;
        });
        self.currentPageRecords = ko.computed(function () {
            var newPageIndex = -1;
            var pageIndex = self.currentPageIndex();
            var maxPageIndex = self.maxPageIndex();
            if (pageIndex > maxPageIndex) {
                newPageIndex = maxPageIndex;
            }
            else if (pageIndex == -1) {
                if (maxPageIndex > -1) {
                    newPageIndex = 0;
                }
                else {
                    newPageIndex = -2;
                }
            }
            else {
                newPageIndex = pageIndex;
            }

            if (newPageIndex != pageIndex) {
                if (newPageIndex >= -1) {
                    self.currentPageIndex(newPageIndex);
                }

                return [];
            }

            var pageSize = self.currentPageSize();
            var startIndex = pageIndex * pageSize;
            var endIndex = startIndex + pageSize;
            return self.records().slice(startIndex, endIndex);
        }).extend({ throttle: 5 });
        self.moveFirst = function () {
            self.changePageIndex(0);
        };
        self.movePrevious = function () {
            self.changePageIndex(self.currentPageIndex() - 1);
        };
        self.moveNext = function () {
            self.changePageIndex(self.currentPageIndex() + 1);
        };
        self.moveLast = function () {
            self.changePageIndex(self.maxPageIndex());
        };
        self.changePageIndex = function (newIndex) {
            if (newIndex < 0
                || newIndex == self.currentPageIndex()
                || newIndex > self.maxPageIndex()) {
                return;
            }

            self.currentPageIndex(newIndex);
        };
        self.onPageSizeChange = function () {
            self.currentPageIndex(0);
        };
        self.renderPagers = function () {
            var pager = "<div><a href=\"#\" data-bind=\"click: pager.moveFirst, enable: pager.currentPageIndex() > 0\">&lt;&lt;</a><a href=\"#\" data-bind=\"click: pager.movePrevious, enable: pager.currentPageIndex() > 0\">&lt;</a>Page <span data-bind=\"text: pager.currentPageIndex() + 1\"></span> of <span data-bind=\"text: pager.maxPageIndex() + 1\"></span> [<span data-bind=\"text: pager.recordCount\"></span> Record(s)]<select data-bind=\"options: pager.pageSizeOptions, value: pager.currentPageSize, event: { change: pager.onPageSizeChange }\"></select><a href=\"#\" data-bind=\"click: pager.moveNext, enable: pager.currentPageIndex() < pager.maxPageIndex()\">&gt;</a><a href=\"#\" data-bind=\"click: pager.moveLast, enable: pager.currentPageIndex() < pager.maxPageIndex()\">&gt;&gt;</a></div>";
            $("div.Pager").html(pager);
        };
        self.renderNoRecords = function () {
            var message = "<span data-bind=\"visible: pager.recordCount() == 0\">No records found.</span>";
            $("div.NoRecords").html(message);
        };

        self.renderPagers();
        self.renderNoRecords();
    }

    function SorterModel(sortOptions, records) {
        var self = this;
        self.records = GetObservableArray(records);
        self.sortOptions = ko.observableArray(sortOptions);
        self.sortDirections = ko.observableArray([
            {
                Name: "Asc",
                Value: "Asc",
                Sort: false
            },
            {
                Name: "Desc",
                Value: "Desc",
                Sort: true
            }]);
        self.currentSortOption = ko.observable(self.sortOptions()[0]);
        self.currentSortDirection = ko.observable(self.sortDirections()[0]);
        self.orderedRecords = ko.computed(function () {
            var records = self.records();
            var sortOption = self.currentSortOption();
            var sortDirection = self.currentSortDirection();
            if (sortOption == null || sortDirection == null) {
                return records;
            }

            var sortedRecords = records.slice(0, records.length);
            SortArray(sortedRecords, sortDirection.Sort, sortOption.Sort);
            return sortedRecords;
        }).extend({ throttle: 5 });
    }

    function FilterModel(filters, records) {
        var self = this;
        self.records = GetObservableArray(records);
        self.filters = ko.observableArray(filters);
        self.activeFilters = ko.computed(function () {
            var filters = self.filters();
            var activeFilters = [];
            for (var index = 0; index < filters.length; index++) {
                var filter = filters[index];
                if (filter.CurrentOption) {
                    var filterOption = filter.CurrentOption();
                    if (filterOption && filterOption.FilterValue != null) {
                        var activeFilter = {
                            Filter: filter,
                            IsFiltered: function (filter, record) {
                                var filterOption = filter.CurrentOption();
                                if (!filterOption) {
                                    return;
                                }

                                var recordValue = filter.RecordValue(record);
                                return recordValue != filterOption.FilterValue; NoMat
                            }
                        };
                        activeFilters.push(activeFilter);
                    }
                }
                else if (filter.Value) {
                    var filterValue = filter.Value();
                    if (filterValue && filterValue != "") {
                        var activeFilter = {
                            Filter: filter,
                            IsFiltered: function (filter, record) {
                                var filterValue = filter.Value();
                                filterValue = filterValue.toUpperCase();

                                var recordValue = filter.RecordValue(record);
                                recordValue = recordValue.toUpperCase();
                                return recordValue.indexOf(filterValue) == -1;
                            }
                        };
                        activeFilters.push(activeFilter);
                    }
                }
            }

            return activeFilters;
        });
        self.filteredRecords = ko.computed(function () {
            var records = self.records();
            var filters = self.activeFilters();
            if (filters.length == 0) {
                return records;
            }

            var filteredRecords = [];
            for (var rIndex = 0; rIndex < records.length; rIndex++) {
                var isIncluded = true;
                var record = records[rIndex];
                for (var fIndex = 0; fIndex < filters.length; fIndex++) {
                    var filter = filters[fIndex];
                    var isFiltered = filter.IsFiltered(filter.Filter, record);
                    if (isFiltered) {
                        isIncluded = false;
                        break;
                    }
                }

                if (isIncluded) {
                    filteredRecords.push(record);
                }
            }

            return filteredRecords;
        }).extend({ throttle: 200 });
    }

    function ExtractModels(parent, data, constructor) {
        var models = [];
        if (data == null) {
            return models;
        }

        for (var index = 0; index < data.length; index++) {
            var row = data[index];
            var model = new constructor(row, parent);
            models.push(model);
        }

        return models;
    }

    function GetObservableArray(array) {
        if (typeof (array) == 'function') {
            return array;
        }

        return ko.observableArray(array);
    }

    function CompareCaseInsensitive(left, right) {
        if (left == null) {
            return right == null;
        }
        else if (right == null) {
            return false;
        }

        return left.toUpperCase() <= right.toUpperCase();
    }

    function GetOption(name, value, filterValue) {
        var option = {
            Name: name,
            Value: value,
            FilterValue: filterValue
        };
        return option;
    }

    function SortArray(array, direction, comparison) {
        if (array == null) {
            return [];
        }

        for (var oIndex = 0; oIndex < array.length; oIndex++) {
            var oItem = array[oIndex];
            for (var iIndex = oIndex + 1; iIndex < array.length; iIndex++) {
                var iItem = array[iIndex];
                var isOrdered = comparison(oItem, iItem);
                if (isOrdered == direction) {
                    array[iIndex] = oItem;
                    array[oIndex] = iItem;
                    oItem = iItem;
                }
            }
        }

        return array;
    }

    function ViewModel(tools) {
          var self = this;
          self.tools = tools;
      };
    var testCustomers = new ViewModel(@Html.HtmlConvertToJson(Model));

    var testData = {
        customers: testCustomers.tools
    };

    ko.applyBindings(new CustomerPageModel(testData));

</script>
}



