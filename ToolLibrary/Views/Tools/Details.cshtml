@model ToolLibrary.Models.DetailViewModel
@using ToolLibrary.Models
@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>
<script src="~/Scripts/jquery-ui.min.js"></script>
<div>
    <h4>Tool</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.tool.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tool.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.tool.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tool.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.tool.Manufacturer)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tool.Manufacturer)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.tool.AdditionalDescription)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tool.AdditionalDescription)
        </dd>

        <dt>@if (Model != null && !String.IsNullOrEmpty(Model.tool.ImageUrl))
        {
            @Html.DisplayNameFor(model => model.tool.ImageUrl)
        }
        else { <span>Image not Available.</span> }
        </dt>

        <dd>
            <img src="@Url.Content(Model.tool.ImageUrl)" alt="Image" width="200" height="200" class="img-rounded" />
        </dd>

        <dt>
            @*Html.DisplayNameFor(model => model.tool.Due)*@
        </dt>

        <dd>@*if (Model.ReservedDates.Due == DateTime.MinValue) { <b>Item is available for checkout.</b> } else { @Html.DisplayFor(model => model.Due) }*@    
        </dd>

    </dl>
</div>
<p>
    @if (User.IsInRole("admin")) { @Html.ActionLink("Edit", "Edit", new { id = Model.tool.Id }) } |
    <a href="@Url.Action("Index", "Tools")?categoryId=@Model.CategoryId.ToString()">Back to List</a>
</p>
<div><table>
    @if (Model.Rentals.Count > 0)
    {
        foreach (Rental r in Model.Rentals)
        {
            <tr><td>@r.CheckedOut</td><td>@r.DueDate</td></tr>
        }

    }
</table></div>
<div>
    <h2>Checkout Item</h2>
    @if (TempData["Message"] != null)
    { <p>@TempData["Message"];</p> }
    @using (Html.BeginForm("Details", "Tools", new { id = "target", name = "thisform" }))
    {
        <div><ol>
            <li>
                @Html.Label("Begin Checkout")
                @Html.TextBox("txtOut", null, new { @Value = DateTime.Now.ToString("MM/dd/yyyy"), id = "from", @class = "form-control" })
            </li>
            <li>
                @Html.Label("Return Date")
                @Html.TextBox("txtReturn", null, new { @Value = DateTime.Now.ToString("MM/dd/yyyy"), id = "to", @class = "form-control" })
            </li>
            @Html.Hidden("id", @Model.tool.Id)
            @Html.Hidden("categoryId", Model.CategoryId)
        </ol></div>
        <button id="dropdown" button class="btn btn-default" type="submit">Check Out</button>
    }

   @{
       if (Model.TriggerOnLoad == true)
       {
            <text>
                <script type="text/javascript">
                    //var categoryId=@Model.CategoryId;
                    //alert('@Model.TriggerOnLoadMessage');
                    //window.location.href = '/Tools?CategoryId=' + categoryId;
                </script>
            </text>
       }

    }
</div>
@section Scripts{
    <script>
        var disableddates = [];
        @if (Model.ReservedDates.Count > 0)
        {
            foreach (var d in Model.ReservedDates)
            {
                @:disableddates.push("@d.ToString("MM/dd/yyyy")");
            };
        }

        function DisableSpecificDates(date) {
            var string = jQuery.datepicker.formatDate('mm/dd/yy', date);
            return [disableddates.indexOf(string) == -1];
        }

        var dateToday = new Date();

        var dates = $("#from, #to").datepicker({
            defaultDate: "+1w",
            changeMonth: true,
            numberOfMonths: 1,
            minDate: dateToday,
            beforeShowDay: DisableSpecificDates,
            onSelect: function (selectedDate) {
                var option = this.id == "from" ? "minDate" : "maxDate",
                    instance = $(this).data("datepicker"),
                    date = $.datepicker.parseDate(instance.settings.dateFormat || $.datepicker._defaults.dateFormat, selectedDate, instance.settings);
                dates.not(this).datepicker("option", option, date);
            }
        });

    </script>
}






